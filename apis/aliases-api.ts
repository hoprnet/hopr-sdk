/* tslint:disable */
/* eslint-disable */
/**
 * HOPRd Rest API v2
 * This Rest API enables developers to interact with a hoprd node programatically.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: tech@hoprnet.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AliasesBody } from '../models';
import { InlineResponse20012 } from '../models';
import { InlineResponse2006 } from '../models';
import { InlineResponse422 } from '../models';
import { RequestStatus } from '../models';
/**
 * AliasesApi - axios parameter creator
 * @export
 */
export const AliasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the PeerId (Hopr address) that have this alias assigned to it.
         * @param {string} alias Alias that we previously assigned to some PeerId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliasesGetAlias: async (alias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias','Required parameter alias was null or undefined when calling aliasesGetAlias.');
            }
            const localVarPath = `/aliases/{alias}`
                .replace(`{${"alias"}}`, encodeURIComponent(String(alias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keyScheme required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-auth-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-auth-token"] = localVarApiKeyValue;
            }

            // authentication passwordScheme required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all aliases you set previously and thier corresponding peer IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliasesGetAliases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aliases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keyScheme required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-auth-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-auth-token"] = localVarApiKeyValue;
            }

            // authentication passwordScheme required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassign an alias from a PeerId. You can always assign back alias to that PeerId using /aliases endpoint.
         * @param {string} alias Alias that we want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliasesRemoveAlias: async (alias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alias' is not null or undefined
            if (alias === null || alias === undefined) {
                throw new RequiredError('alias','Required parameter alias was null or undefined when calling aliasesRemoveAlias.');
            }
            const localVarPath = `/aliases/{alias}`
                .replace(`{${"alias"}}`, encodeURIComponent(String(alias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keyScheme required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-auth-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-auth-token"] = localVarApiKeyValue;
            }

            // authentication passwordScheme required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Instead of using HOPR address, we can assign HOPR address to a specific name called alias. Give an address a more memorable alias and use it instead of Hopr address. Aliases are kept locally and are not saved or shared on the network.
         * @param {AliasesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aliasesSetAlias: async (body?: AliasesBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aliases/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication keyScheme required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-auth-token")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-auth-token"] = localVarApiKeyValue;
            }

            // authentication passwordScheme required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AliasesApi - functional programming interface
 * @export
 */
export const AliasesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the PeerId (Hopr address) that have this alias assigned to it.
         * @param {string} alias Alias that we previously assigned to some PeerId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesGetAlias(alias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20012>>> {
            const localVarAxiosArgs = await AliasesApiAxiosParamCreator(configuration).aliasesGetAlias(alias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all aliases you set previously and thier corresponding peer IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesGetAliases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await AliasesApiAxiosParamCreator(configuration).aliasesGetAliases(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Unassign an alias from a PeerId. You can always assign back alias to that PeerId using /aliases endpoint.
         * @param {string} alias Alias that we want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesRemoveAlias(alias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AliasesApiAxiosParamCreator(configuration).aliasesRemoveAlias(alias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Instead of using HOPR address, we can assign HOPR address to a specific name called alias. Give an address a more memorable alias and use it instead of Hopr address. Aliases are kept locally and are not saved or shared on the network.
         * @param {AliasesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesSetAlias(body?: AliasesBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AliasesApiAxiosParamCreator(configuration).aliasesSetAlias(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AliasesApi - factory interface
 * @export
 */
export const AliasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the PeerId (Hopr address) that have this alias assigned to it.
         * @param {string} alias Alias that we previously assigned to some PeerId.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesGetAlias(alias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20012>> {
            return AliasesApiFp(configuration).aliasesGetAlias(alias, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all aliases you set previously and thier corresponding peer IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesGetAliases(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return AliasesApiFp(configuration).aliasesGetAliases(options).then((request) => request(axios, basePath));
        },
        /**
         * Unassign an alias from a PeerId. You can always assign back alias to that PeerId using /aliases endpoint.
         * @param {string} alias Alias that we want to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesRemoveAlias(alias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AliasesApiFp(configuration).aliasesRemoveAlias(alias, options).then((request) => request(axios, basePath));
        },
        /**
         * Instead of using HOPR address, we can assign HOPR address to a specific name called alias. Give an address a more memorable alias and use it instead of Hopr address. Aliases are kept locally and are not saved or shared on the network.
         * @param {AliasesBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aliasesSetAlias(body?: AliasesBody, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AliasesApiFp(configuration).aliasesSetAlias(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AliasesApi - object-oriented interface
 * @export
 * @class AliasesApi
 * @extends {BaseAPI}
 */
export class AliasesApi extends BaseAPI {
    /**
     * Get the PeerId (Hopr address) that have this alias assigned to it.
     * @param {string} alias Alias that we previously assigned to some PeerId.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    public async aliasesGetAlias(alias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20012>> {
        return AliasesApiFp(this.configuration).aliasesGetAlias(alias, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all aliases you set previously and thier corresponding peer IDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    public async aliasesGetAliases(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return AliasesApiFp(this.configuration).aliasesGetAliases(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unassign an alias from a PeerId. You can always assign back alias to that PeerId using /aliases endpoint.
     * @param {string} alias Alias that we want to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    public async aliasesRemoveAlias(alias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AliasesApiFp(this.configuration).aliasesRemoveAlias(alias, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Instead of using HOPR address, we can assign HOPR address to a specific name called alias. Give an address a more memorable alias and use it instead of Hopr address. Aliases are kept locally and are not saved or shared on the network.
     * @param {AliasesBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AliasesApi
     */
    public async aliasesSetAlias(body?: AliasesBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AliasesApiFp(this.configuration).aliasesSetAlias(body, options).then((request) => request(this.axios, this.basePath));
    }
}
