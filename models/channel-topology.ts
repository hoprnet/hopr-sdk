/* tslint:disable */
/* eslint-disable */
/**
 * HOPRd Rest API v2
 * This Rest API enables developers to interact with a hoprd node programatically.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: tech@hoprnet.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { ChannelStatus } from './channel-status';
import { HoprAddress } from './hopr-address';
import { HoprBalance } from './hopr-balance';
import { NativeAddress } from './native-address';
/**
 * 
 * @export
 * @interface ChannelTopology
 */
export interface ChannelTopology {
    /**
     * Channel ID that can be used in other calls, not to confuse with transaction hash.
     * @type {string}
     * @memberof ChannelTopology
     */
    channelId?: string;
    /**
     * 
     * @type {HoprAddress}
     * @memberof ChannelTopology
     */
    sourcePeerId?: HoprAddress;
    /**
     * 
     * @type {HoprAddress}
     * @memberof ChannelTopology
     */
    destinationPeerId?: HoprAddress;
    /**
     * 
     * @type {NativeAddress}
     * @memberof ChannelTopology
     */
    sourceAddress?: NativeAddress;
    /**
     * 
     * @type {NativeAddress}
     * @memberof ChannelTopology
     */
    destinationAddress?: NativeAddress;
    /**
     * 
     * @type {HoprBalance}
     * @memberof ChannelTopology
     */
    balance?: HoprBalance;
    /**
     * 
     * @type {ChannelStatus}
     * @memberof ChannelTopology
     */
    status?: ChannelStatus;
    /**
     * Redeemed commitment
     * @type {string}
     * @memberof ChannelTopology
     */
    commitment?: string;
    /**
     * Ticket redemption relies on providing the value opening to a series of commitments that have previously been stored on-chain by the ticket recipient.
     * @type {string}
     * @memberof ChannelTopology
     */
    ticketEpoch?: string;
    /**
     * Each ticket is labeled by an ongoing serial number named ticket index i and its current value is stored in the smart contract.
     * @type {string}
     * @memberof ChannelTopology
     */
    ticketIndex?: string;
    /**
     * Payment channels might run through multiple open and close sequences, this epoch tracks the sequence.
     * @type {string}
     * @memberof ChannelTopology
     */
    channelEpoch?: string;
    /**
     * Time when the channel can be closed
     * @type {string}
     * @memberof ChannelTopology
     */
    closureTime?: string;
}
