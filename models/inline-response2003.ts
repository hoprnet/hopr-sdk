/* tslint:disable */
/* eslint-disable */
/**
 * HOPRd Rest API v2
 * This Rest API enables developers to interact with a hoprd node programatically.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: tech@hoprnet.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * Name of the network the node is running on.
     * @type {string}
     * @memberof InlineResponse2003
     */
    network?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2003
     */
    announcedAddress?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2003
     */
    listeningAddress?: Array<string>;
    /**
     * Name of the Hopr network this node connects to.
     * @type {string}
     * @memberof InlineResponse2003
     */
    chain?: string;
    /**
     * Contract address of the Hopr token on the ethereum chain.
     * @type {string}
     * @memberof InlineResponse2003
     */
    hoprToken?: string;
    /**
     * Contract address of the HoprChannels smart contract on ethereum chain. This smart contract is used to open payment channels between nodes on blockchain.
     * @type {string}
     * @memberof InlineResponse2003
     */
    hoprChannels?: string;
    /**
     * Contract address of the contract that allows to control the number of nodes in the network
     * @type {string}
     * @memberof InlineResponse2003
     */
    hoprNetworkRegistryAddress?: string;
    /**
     * Indicates how good is the connectivity of this node to the HOPR network: either RED, ORANGE, YELLOW or GREEN
     * @type {string}
     * @memberof InlineResponse2003
     */
    connectivityStatus?: string;
    /**
     * Determines whether the staking account associated with this node is eligible for accessing the HOPR network. Always true if network registry is disabled.
     * @type {boolean}
     * @memberof InlineResponse2003
     */
    isEligible?: boolean;
    /**
     * Time (in minutes) that this node needs in order to clean up before closing the channel. When requesting to close the channel each node needs some time to make sure that channel can be closed securely and cleanly. After this channelClosurePeriod passes the second request for closing channel will close the channel.
     * @type {number}
     * @memberof InlineResponse2003
     */
    channelClosurePeriod?: number;
}
